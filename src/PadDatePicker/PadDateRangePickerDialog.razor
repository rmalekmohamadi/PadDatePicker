@namespace PadDatePicker

@inherits PadComponentBase

<div class="@Classes?.Root">
    <div>
        <label class="@Classes?.Label">@Label</label>
        <div class="@Classes?.InputWrapper">
            <div class="@Classes?.InputContainer">
                @if(IconSide.Equals(Side.Start))
                {
                    if (IconTemplate != null)
                    {
                        @IconTemplate
                    }
                    else
                    {
                        <span class="@Classes?.IconWrapper" @onclick="@((e) => Toggle())">
                            <svg class="@Classes?.Icon" fill="currentColor" focusable="false" viewBox="0 0 24 24" aria-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"></path>
                            </svg>
                        </span>
                    }
                }

                @if(!string.IsNullOrWhiteSpace(StartRangeLabel))
                {
                    <span class="@Classes?.StartRangeLabel">@StartRangeLabel</span>
                }

                <input @oninput="@HandleOnStartChange"
                       @onfocus="@HandleOnStartFocus"
                       @onfocusout="@HandleOnStartFocusOut"
                       value="@StartCurrentValueAsString"
                       type="text"
                       @attributes="SetAttributes()"
                       @ref="_startInputRef"
                       placeholder="@StartPlaceholder"
                       class="@Classes?.Input">

                @if (!string.IsNullOrWhiteSpace(EndRangeLabel))
                {
                    <span class="@Classes?.EndRangeLabel">@EndRangeLabel</span>
                }

                <input @oninput="@HandleOnEndChange"
                       @onfocus="@HandleOnEndFocus"
                       @onfocusout="@HandleOnEndFocusOut"
                       value="@EndCurrentValueAsString"
                       type="text"
                       @attributes="SetAttributes()"
                       @ref="_endInputRef"
                       placeholder="@EndPlaceholder"
                       class="@Classes?.Input">
                
                @if(IconSide.Equals(Side.End))
                {
                    if (IconTemplate != null)
                    {
                        @IconTemplate
                    }
                    else
                    {
                        <span class="@Classes?.IconWrapper">
                            <svg class="@Classes?.Icon" fill="currentColor" focusable="false" viewBox="0 0 24 24" aria-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"></path>
                            </svg>
                        </span>
                    }
                }
            </div>
        </div>
    </div>
    
    @if (_isVisible)
    {
        
    }
</div>
